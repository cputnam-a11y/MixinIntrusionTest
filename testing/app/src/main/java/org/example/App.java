/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;
import net.bytebuddy.agent.ByteBuddyAgent;
import org.objectweb.asm.Opcodes;

import java.io.InputStream;
import java.lang.instrument.ClassDefinition;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;
import java.util.Objects;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());
        Instrumentation instrumentation = ByteBuddyAgent.install();
//        if (instrumentation.isRetransformClassesSupported())
        System.out.println(instrumentation.isRedefineClassesSupported());
        instrumentation.addTransformer(new ClassFileTransformer() {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                if (Objects.equals(className, "org.example.test.Test")) {
                    ClassReader reader = new ClassReader(classfileBuffer);
                    ClassWriter writer = new ClassWriter(reader, 0);
                    reader.accept(new ClassVisitor(Opcodes.ASM9, writer) {
                        @Override
                        public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
                            access = (access & (~Opcodes.ACC_PRIVATE)) & Opcodes.ACC_PUBLIC;
                            super.visit(version, access, name, signature, name, interfaces);
                        }
                    }, 0);
                }
                return null;
            }
        });
        Class<?> Test = Class.forName("org.example.test.Test");
//        InputStream stream = App.class.getClassLoader().getResourceAsStream(Test.getName() + ".class")
//            try (InputStream stream = App.class.getClassLoader().getResourceAsStream(Test.getName() + ".class")) {
//                byte[] bytes = stream.readAllBytes();
                    instrumentation.redefineClasses(new ClassDefinition(Test, modify(Test, getBytes(Test))));
//            }
//
//        instrumentation.redefineClasses(Class.forName("org.example.test.Test"));
        Class.forName("org.example.test.Test").accessFlags().forEach(System.out::println);
//        byte[] bytes = Test2Dump.dump();
//        DynamicClassLoader loader = new DynamicClassLoader();
//        loader.defineClass("org.example.test.Test2", bytes);
    }

    public static byte[] modify(Class<?> classBeingRedefined, byte[] classfileBuffer) {
        ClassReader reader = new ClassReader(classfileBuffer);
        ClassWriter writer = new ClassWriter(reader, 0);
        reader.accept(new ClassVisitor(Opcodes.ASM9, writer) {
            @Override
            public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
                access = (access & (~Opcodes.ACC_PRIVATE)) & Opcodes.ACC_PUBLIC;
                super.visit(version, access, name, signature, name, interfaces);
            }
        }, 0);
        return writer.toByteArray();
    }
    private static byte[] getBytes(Class<?> clazz) {
        String name = clazz.getName().replace(".", "/") + ".class";
        InputStream stream = clazz.getClassLoader().getResourceAsStream(name);
        if (stream == null) {
            stream = App.class.getClassLoader().getResourceAsStream(name);
        }
        if (stream == null) {
            stream = ClassLoader.getSystemClassLoader().getResourceAsStream(name);
        }
        if (stream == null) {
            stream = ClassLoader.getPlatformClassLoader().getResourceAsStream(name);
        }
        if (stream == null) {
            throw new RuntimeException("Could not find class file for " + clazz.getName());
        }
        try {
            return stream.readAllBytes();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
